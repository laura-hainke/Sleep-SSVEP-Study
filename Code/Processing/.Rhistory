# IDs of participants whose data will be imported, as character vector
list_IDs = c("01","02","04","05")
# Number of SSVEP datapoints
nr_datapoints = 25
# Initialize dataframe to import CSV data for one participant
data_SSVEPs_individual = data.frame(ID = character(nr_datapoints),
time = seq(1,nr_datapoints),
W_con = numeric(nr_datapoints),
N2_con = numeric(nr_datapoints),
N3_con = numeric(nr_datapoints),
REM_con = numeric(nr_datapoints),
W_exp = numeric(nr_datapoints),
N2_exp = numeric(nr_datapoints),
N3_exp = numeric(nr_datapoints),
REM_exp = numeric(nr_datapoints))
View(data_SSVEPs_individual)
# Length of final data frame
nr_conditions = 2
nr_stages = 4
length_dataframe_group = length(list_IDs) * nr_datapoints * nr_conditions * nr_stages
# Initialize dataframe in long format, to store all participants' data
data_SSVEPs_group = data.frame(ID = character(length_dataframe_group),
time = numeric(length_dataframe_group),
stage = character(length_dataframe_group),
condition = character(length_dataframe_group),
value = numeric(length_dataframe_group))
View(data_SSVEPs_group)
i=1
# Import data for individual participant, load into dataframe
filename_con = paste(path_derivatives, list_IDs[i], "\\Control\\", list_IDs[i], "_control_SSVEP-output-curves.csv", sep = "")
filename_exp = paste(path_derivatives, list_IDs[i], "\\Experimental\\", list_IDs[i], "_experimental_SSVEP-output-curves.csv", sep = "")
data_con = read.csv(filename_con, header=TRUE)
data_exp = read.csv(filename_exp, header=TRUE)
data_SSVEPs_individual$ID = list_IDs[i]
data_SSVEPs_individual[,3:6] = data_con[2:5]
data_SSVEPs_individual[,7:10] = data_exp[2:5]
View(data_SSVEPs_group)
View(data_SSVEPs_individual)
# Convert dataframe to long format
data_individual_long = melt(data_SSVEPs_individual, id.vars=c("ID","time"), variable.name="condition", value.name="value")
View(data_individual_long)
data_individual_long = separate_wider_delim(data_individual_long, cols = condition, delim = "_", names = c("stage","condition"))
View(data_SSVEPs_group)
idx_end = nrow(data_individual_long) * i
idx_start = idx_end - nrow(data_individual_long) + 1
data_SSVEPs_group[idx_start:idx_end,] = data_individual_long
# Working directory
setwd("C:\\Users\\Mitarbeiter\\Documents\\Gamma_Sleep\\Github_Repo\\Gamma-Sleep\\Code\\Statistics")
# Function files in current directory
source("GammaSleep_statistics_functions.r")
source("GammaSleep_plots_functions.r")
source("GammaSleep_data-handling_functions.r")
# Libraries
library(pastecs)
## Global variables
# Using global environment (<<- assignment) to avoid redundant function arguments
# Path to folders with derivative data
path_derivatives <<- "C:\\Users\\Mitarbeiter\\Documents\\Gamma_Sleep\\Data\\Derivatives\\"
# List of folder names in directory, corresponding to participant numbers
list_IDs <<- list.dirs(path = path_derivatives, full.names = FALSE, recursive = FALSE)
# Remove rejected datasets
list_IDs <<- list_IDs[! list_IDs %in% c("03","15")] # subjects 03 and 15 were drop-outs
## Initializing
data_demo <<- initialize_dataframe("demographic")
data_sleep <<- initialize_dataframe("sleep_quality")
data_PSD <<- initialize_dataframe("PSD_metrics")
data_SSVEP <<- initialize_dataframe("SSVEP_metrics")
## Loading data
load_derivative_data()
stat.desc(data_demo$age)
stat.desc(data_demo$age)$mean
a=stat.desc(data_demo$age)
summary(data_demo$age)
min(data_demo$age)
sum(data_demo$sex == "1")
sum(data_demo$sex == "2")
stat.desc(data_demo$sex)
stat.desc(data_demo$gender_match)
stat.desc(data_demo$handedness)
# Sample Description
### Age
Mean = `r round(mean(data_demo$age),2)` y
# Libraries
library(chron)
mean(times(data_demo$uMCTQ_score))
View(data_demo)
mean(times(data_demo$uMCTQ_score))
sd(times(data_demo$uMCTQ_score))
min(times(data_demo$uMCTQ_score))
max(times(data_demo$uMCTQ_score))
# Packages
library(data.table)
library(lubridate)
# Set working directory
setwd("C:/Users/Mitarbeiter/Documents/Gamma_Sleep/Github_Repo/Gamma-Sleep/Code/Screening")
# Source functions, file in current directory
source("GammaSleep_screening_functions.r")
# Path to file with all input data
path_in = "C:/Users/Mitarbeiter/Documents/Gamma_Sleep/Study_Enrolment/Screening/Screening_raw_data/REDCap_screening_batch3.csv"
# Load full data file and format it
data = load_redcap(path_in)
# Get record subset of interest
data = data[46:90,]
View(data)
View(data)
# Select current record
record_id = as.numeric(readline(prompt="Record ID:"))
# Get data for this record ID
data_id = data[data$record_id == record_id,]
View(data_id)
View(data)
# Path to file with all input data
path_in = "C:/Users/Mitarbeiter/Documents/Gamma_Sleep/Study_Enrolment/Screening/Screening_raw_data/REDCap_screening_batch1.csv"
# Load full data file and format it
data = load_redcap(path_in)
View(data)
length(data)
nrow(data)
nrow(data)/2
# Get record subset of interest
data = data[nrow(data)/2:nrow(data),]
View(data)
# Load full data file and format it
data = load_redcap(path_in)
View(data)
# Get record subset of interest
data = data[(nrow(data)/2):(nrow(data)),]
View(data)
# Load full data file and format it
data = load_redcap(path_in)
# Get record subset of interest
data = data[(nrow(data)/2+1):(nrow(data)),]
View(data)
# Select current record
record_id = as.numeric(readline(prompt="Record ID:"))
# Get data for this record ID
data_id = data[data$record_id == record_id,]
View(data_id)
# Packages
library(data.table)
library(lubridate)
# Set working directory
setwd("C:/Users/Mitarbeiter/Documents/Gamma_Sleep/Github_Repo/Gamma-Sleep/Code/Processing")
# Source functions, file in current directory
source("GammaSleep_personal-data_functions.r")
# Get participant number from user
subject_nr = readline(prompt="Subject number: ")
# Path to file with input data
path_in = paste("C:/Users/Mitarbeiter/Documents/Gamma_Sleep/Data/Raw/", subject_nr, "/REDCap/", subject_nr, "_screening.csv", sep="")
# Path to file with output data
path_out = paste("C:/Users/Mitarbeiter/Documents/Gamma_Sleep/Data/Derivatives/", subject_nr, "/REDCap/", subject_nr, "_personal-data.csv", sep="")
# Load data file and format it
data = load_redcap(path_in)
View(data)
# Load data file and format it
data = load_redcap(path_in)
View(data)
# Extract AUDIT score
audit_score = as.integer(data$audit_score[2])
# Compute uMCTQ score
MSF_sc = score_uMCTQ(data)
## Compute PSQI score
psqi_score = score_PSQI(data)
## Time to schedule arrival at sleep lab, 1.5 hours before usual bedtime on free days
lab_arrival = strptime(data$mumctq_fall_sleep_free[2], format = "%H:%M") - minutes(90)
lab_arrival = format(lab_arrival, "%H:%M") # format to include only hours and minutes
print(paste("Lab arrival:", lab_arrival))
# Export outputs --------------------------------------------------------------------------------------------------
# Initialize dataframe for desired output values
outputs = data.frame(matrix(ncol = 8, nrow = 1))
colnames(outputs) = c("age","sex","gender_match","handedness","education","time_lab_arrival","uMCTQ_score","PSQI_score")
# Gender: compute if gender matches sex or not
if (data$sex[2] == 1 & data$gender[2] == 1) { # female & woman
gender_match = 1
} else if (data$sex[2] == 2 & data$gender[2] == 2) { # male & man
gender_match = 1
} else { # all other cases, including intersex, transgender, non-binary, "prefer not to say"; check individual case
gender_match = 0
}
# Fill dataframe with output values in correct formats
outputs$age = as.numeric(data$age[2]) # num
outputs$sex = as.numeric(as.character(data$sex[2])) # num
outputs$gender_match = gender_match # num
outputs$handedness = as.numeric(as.character(data$handedness[2])) # num
outputs$education = as.numeric(as.character(data$education[2])) # num
outputs$time_lab_arrival = hms::parse_hm(lab_arrival) # hms
outputs$uMCTQ_score = hms::parse_hm(MSF_sc) # hms
outputs$PSQI_score = psqi_score # num
View(outputs)
# Export as CSV
write.csv(outputs, file=path_out,  row.names = FALSE)
# Working directory
setwd("C:\\Users\\Mitarbeiter\\Documents\\Gamma_Sleep\\Github_Repo\\Gamma-Sleep\\Code\\Statistics")
# Function files in current directory
source("GammaSleep_statistics_functions.r")
source("GammaSleep_plots_functions.r")
source("GammaSleep_data-handling_functions.r")
# Libraries
library(pastecs)
## Global variables
# Using global environment (<<- assignment) to avoid redundant function arguments
# Path to folders with derivative data
path_derivatives <<- "C:\\Users\\Mitarbeiter\\Documents\\Gamma_Sleep\\Data\\Derivatives\\"
# List of folder names in directory, corresponding to participant numbers
list_IDs <<- list.dirs(path = path_derivatives, full.names = FALSE, recursive = FALSE)
# Remove rejected datasets
list_IDs <<- list_IDs[! list_IDs %in% c("03","15")] # subjects 03 and 15 were drop-outs
# Dataframes for Derivative Data ---------------------------------------------------
## Initializing
data_demo <<- initialize_dataframe("demographic")
data_sleep <<- initialize_dataframe("sleep_quality")
data_PSD <<- initialize_dataframe("PSD_metrics")
data_SSVEP <<- initialize_dataframe("SSVEP_metrics")
## Loading data
load_derivative_data()
View(data_demo)
View(data_demo)
# Packages
library(data.table)
library(lubridate)
# Set working directory
setwd("C:/Users/Mitarbeiter/Documents/Gamma_Sleep/Github_Repo/Gamma-Sleep/Code/Processing")
# Source functions, file in current directory
source("GammaSleep_personal-data_functions.r")
# Get participant number from user
subject_nr = readline(prompt="Subject number: ")
# Path to file with input data
path_in = paste("C:/Users/Mitarbeiter/Documents/Gamma_Sleep/Data/Raw/", subject_nr, "/REDCap/", subject_nr, "_screening.csv", sep="")
# Path to file with output data
path_out = paste("C:/Users/Mitarbeiter/Documents/Gamma_Sleep/Data/Derivatives/", subject_nr, "/REDCap/", subject_nr, "_personal-data.csv", sep="")
# Load data file and format it
data = load_redcap(path_in)
# Extract AUDIT score
audit_score = as.integer(data$audit_score[2])
# Compute uMCTQ score
MSF_sc = score_uMCTQ(data)
## Compute PSQI score
psqi_score = score_PSQI(data)
## Time to schedule arrival at sleep lab, 1.5 hours before usual bedtime on free days
lab_arrival = strptime(data$mumctq_fall_sleep_free[2], format = "%H:%M") - minutes(90)
lab_arrival = format(lab_arrival, "%H:%M") # format to include only hours and minutes
print(paste("Lab arrival:", lab_arrival))
# Export outputs --------------------------------------------------------------------------------------------------
# Initialize dataframe for desired output values
outputs = data.frame(matrix(ncol = 8, nrow = 1))
colnames(outputs) = c("age","sex","gender_match","handedness","education","time_lab_arrival","uMCTQ_score","PSQI_score")
# Gender: compute if gender matches sex or not
if (data$sex[2] == 1 & data$gender[2] == 1) { # female & woman
gender_match = 1
} else if (data$sex[2] == 2 & data$gender[2] == 2) { # male & man
gender_match = 1
} else { # all other cases, including intersex, transgender, non-binary, "prefer not to say"; check individual case
gender_match = 0
}
# Fill dataframe with output values in correct formats
outputs$age = as.numeric(data$age[2]) # num
outputs$sex = as.numeric(as.character(data$sex[2])) # num
outputs$gender_match = gender_match # num
outputs$handedness = as.numeric(as.character(data$handedness[2])) # num
outputs$education = as.numeric(as.character(data$education[2])) # num
outputs$time_lab_arrival = hms::parse_hm(lab_arrival) # hms
outputs$uMCTQ_score = hms::parse_hm(MSF_sc) # hms
outputs$PSQI_score = psqi_score # num
View(data)
View(outputs)
mean(times(data_demo$uMCTQ_score))
# Working directory
setwd("C:\\Users\\Mitarbeiter\\Documents\\Gamma_Sleep\\Github_Repo\\Gamma-Sleep\\Code\\Statistics")
# Function files in current directory
source("GammaSleep_statistics_functions.r")
source("GammaSleep_plots_functions.r")
source("GammaSleep_data-handling_functions.r")
# Libraries
library(chron)
## Global variables
# Using global environment (<<- assignment) to avoid redundant function arguments
# Path to folders with derivative data
path_derivatives <<- "C:\\Users\\Mitarbeiter\\Documents\\Gamma_Sleep\\Data\\Derivatives\\"
# List of folder names in directory, corresponding to participant numbers
list_IDs <<- list.dirs(path = path_derivatives, full.names = FALSE, recursive = FALSE)
# Remove rejected datasets
list_IDs <<- list_IDs[! list_IDs %in% c("03","15")] # subjects 03 and 15 were drop-outs
## Initializing
data_demo <<- initialize_dataframe("demographic")
data_sleep <<- initialize_dataframe("sleep_quality")
data_PSD <<- initialize_dataframe("PSD_metrics")
data_SSVEP <<- initialize_dataframe("SSVEP_metrics")
## Loading data
load_derivative_data()
View(data_demo)
mean(times(data_demo$uMCTQ_score))
a=times(data_demo$uMCTQ_score)
rm(a)
mean_uMCTQ = mean(times(data_demo$uMCTQ_score))
mean_uMCTQ = chr(mean(times(data_demo$uMCTQ_score)))
mean_uMCTQ = str(mean(times(data_demo$uMCTQ_score)))
mean_uMCTQ = mean(times(data_demo$uMCTQ_score))
# Run statistical test
test_two_levels(data_PSD$W_PSD40_exp, data_PSD$W_PSD40_con, parametric=TRUE, alternative="greater")
results_H1 = test_two_levels(data_PSD$W_PSD40_exp, data_PSD$W_PSD40_con, parametric=TRUE, alternative="greater")
results_H1
results_H1 = test_two_levels(data_PSD$W_PSD40_exp, data_PSD$W_PSD40_con, parametric=TRUE, alternative="greater")
# Function files in current directory
source("GammaSleep_statistics_functions.r")
source("GammaSleep_plots_functions.r")
source("GammaSleep_data-handling_functions.r")
results_H1 = test_two_levels(data_PSD$W_PSD40_exp, data_PSD$W_PSD40_con, parametric=TRUE, alternative="greater")
results_H1
View(results_H1)
# Function files in current directory
source("GammaSleep_statistics_functions.r")
results_H1 = test_two_levels(data_PSD$W_PSD40_exp, data_PSD$W_PSD40_con, parametric=TRUE, alternative="greater")
results_H1
# Function files in current directory
source("GammaSleep_statistics_functions.r")
results_H1 = test_two_levels(data_PSD$W_PSD40_exp, data_PSD$W_PSD40_con, parametric=TRUE, alternative="greater")
# Function files in current directory
source("GammaSleep_statistics_functions.r")
results_H1 = test_two_levels(data_PSD$W_PSD40_exp, data_PSD$W_PSD40_con, parametric=TRUE, alternative="greater")
source("GammaSleep_statistics_functions.r")
# Function files in current directory
source("GammaSleep_statistics_functions.r")
results_H1 = test_two_levels(data_PSD$W_PSD40_exp, data_PSD$W_PSD40_con, parametric=TRUE, alternative="greater")
# Function files in current directory
source("GammaSleep_statistics_functions.r")
results_H1 = test_two_levels(data_PSD$W_PSD40_exp, data_PSD$W_PSD40_con, parametric=TRUE, alternative="greater")
# Function files in current directory
source("GammaSleep_statistics_functions.r")
results_H1 = test_two_levels(data_PSD$W_PSD40_exp, data_PSD$W_PSD40_con, parametric=TRUE, alternative="greater")
interpret_cohens_d(1.7, rules = "cohen1988")
# Get data subset
data_anova_PSD_dB = subset(data_PSD_dB_long, condition=="exp", select=c(ID,stage,value))
# Conversion to long format
data_PSD_dB_long = dataframe_wide_to_long(data_PSD[,c("ID","W_PSD40_con","N2_PSD40_con","N3_PSD40_con","REM_PSD40_con","W_PSD40_exp","N2_PSD40_exp","N3_PSD40_exp","REM_PSD40_exp")])
# Get data subset
data_anova_PSD_dB = subset(data_PSD_dB_long, condition=="exp", select=c(ID,stage,value))
# Get data subset
data_anova_PSD_dB = subset(data_PSD_dB_long, condition=="exp", select=c(ID,stage,value))
# Run statistical test
test_multiple_levels(data_anova_PSD_dB, parametric=TRUE, sphericity_correction="greenhouse-geisser")
# Run statistical test
test_multiple_levels(data_anova_PSD_dB, parametric=TRUE, sphericity_correction="greenhouse-geisser")
# Function files in current directory
source("GammaSleep_statistics_functions.r")
# Get data subset
data_anova_PSD_dB = subset(data_PSD_dB_long, condition=="exp", select=c(ID,stage,value))
# Run statistical test
test_multiple_levels(data_anova_PSD_dB, parametric=TRUE, sphericity_correction="greenhouse-geisser")
data_ID_factor_value=data_anova_PSD_dB
sphericity_correction="greenhouse-geisser"
# Change column names for formula format
colnames(data_ID_factor_value) = c("ID","factor","value")
# Model
results = lme(value~factor, random=~1|ID, data=data_ID_factor_value, method="ML")
# Table for interpretation of results
anova_table = Anova(results, type="III", correction=sphericity_correction)
View(anova_table)
anova_table["factor","Pr(>Chisq)"]
# Effect size
effect = eta_squared(results, partial=TRUE) # Partial eta-squared
effect_size = effect$Eta2_partial
# Post-hoc tests
post_hoc_tests = pairwise.t.test(data_ID_factor_value$value, data_ID_factor_value$factor, alternative=c("two.sided"), p.adj="bonf")
View(effect)
print(effect[,2:4])
View(post_hoc_tests)
print(post_hoc_tests)
print(post_hoc_tests[3:4,])
print(post_hoc_tests[1])
print(post_hoc_tests[2])
print(post_hoc_tests[3])
print(post_hoc_tests[4])
print(post_hoc_tests[3:4])
print(post_hoc_tests$p.value)
# Conversion to long format
data_PSD_SNR_long = dataframe_wide_to_long(data_PSD[,c("ID","W_SNR40_con","N2_SNR40_con","N3_SNR40_con","REM_SNR40_con","W_SNR40_exp","N2_SNR40_exp","N3_SNR40_exp","REM_SNR40_exp")])
# Boxplots
plot_box_2X4(data=data_PSD_SNR_long[data_PSD_SNR_long$stage=="W",], title_plot="SNR of 40 Hz Power - Wake", title_y="SNR", ymin=0, ymax=350)
plot_box_2X4(data=data_PSD_SNR_long[data_PSD_SNR_long$stage!="W",], title_plot="SNR of 40 Hz Power - Sleep", title_y="SNR", ymin=0, ymax=18)
# Connected scatterplot
plot_scatter_2X4(data=data_PSD_SNR_long[data_PSD_SNR_long$stage=="W",], title_plot="SNR of 40 Hz Power - Wake", title_y="SNR", ymin=0, ymax=350)
plot_scatter_2X4(data=data_PSD_SNR_long[data_PSD_SNR_long$stage!="W",], title_plot="SNR of 40 Hz Power - Sleep", title_y="SNR", ymin=0, ymax=18)
# Median SNR values per condition
medians_PSD_SNR = aggregate(value ~ stage * condition, data_PSD_SNR_long, median) # mean likely biased by outliers
print(medians_PSD_SNR)
# Median SNR values per condition
medians_PSD_SNR = aggregate(value ~ stage * condition, data_PSD_SNR_long, median) # mean likely biased by outliers
print(medians_PSD_SNR[,1:3])
View(medians_PSD_SNR)
test_two_levels(data_SSVEP$W_PTA_exp, data_SSVEP$W_PTA_con, parametric=FALSE, alternative="greater")
# Get data subset
data_anova_SSVEP_uV = subset(data_SSVEP_uV_long, condition=="exp", select=c(ID,stage,value))
9.810482e-01
# Function files in current directory
source("GammaSleep_statistics_functions.r")
# Get data subset
data_anova_SSVEP_uV = subset(data_SSVEP_uV_long, condition=="exp", select=c(ID,stage,value))
# Working directory
setwd("C:\\Users\\Mitarbeiter\\Documents\\Gamma_Sleep\\Github_Repo\\Gamma-Sleep\\Code\\Statistics")
# Function files in current directory
source("GammaSleep_statistics_functions.r")
source("GammaSleep_plots_functions.r")
source("GammaSleep_data-handling_functions.r")
# Libraries
library(chron)
## Global variables
# Using global environment (<<- assignment) to avoid redundant function arguments
# Path to folders with derivative data
path_derivatives <<- "C:\\Users\\Mitarbeiter\\Documents\\Gamma_Sleep\\Data\\Derivatives\\"
# List of folder names in directory, corresponding to participant numbers
list_IDs <<- list.dirs(path = path_derivatives, full.names = FALSE, recursive = FALSE)
# Remove rejected datasets
list_IDs <<- list_IDs[! list_IDs %in% c("03","15")] # subjects 03 and 15 were drop-outs
## Initializing
data_demo <<- initialize_dataframe("demographic")
data_sleep <<- initialize_dataframe("sleep_quality")
data_PSD <<- initialize_dataframe("PSD_metrics")
data_SSVEP <<- initialize_dataframe("SSVEP_metrics")
## Loading data
load_derivative_data()
test_two_levels(data_PSD$W_PSD40_exp, data_PSD$W_PSD40_con, parametric=TRUE, alternative="greater")
# Conversion to long format
data_PSD_dB_long = dataframe_wide_to_long(data_PSD[,c("ID","W_PSD40_con","N2_PSD40_con","N3_PSD40_con","REM_PSD40_con","W_PSD40_exp","N2_PSD40_exp","N3_PSD40_exp","REM_PSD40_exp")])
# Boxplots
plot_box_2X4(data=data_PSD_dB_long[data_PSD_dB_long$stage=="W",], title_plot="40 Hz Power - Wake", title_y="Power (dB)", ymin=-100, ymax=-150)
test_two_levels(data_PSD$N2_PSD40_exp, data_PSD$N2_PSD40_con, parametric=TRUE, alternative="greater")
test_two_levels(data_PSD$N3_PSD40_exp, data_PSD$N3_PSD40_con, parametric=TRUE, alternative="greater")
test_two_levels(data_PSD$REM_PSD40_exp, data_PSD$REM_PSD40_con, parametric=FALSE, alternative="greater")
plot_box_2X4(data=data_PSD_dB_long[data_PSD_dB_long$stage!="W",], title_plot="40 Hz Power - Sleep", title_y="Power (dB)", ymin=-100, ymax=-150)
# Get data subset
data_anova_PSD_dB = subset(data_PSD_dB_long, condition=="exp", select=c(ID,stage,value))
# Run statistical test
test_multiple_levels(data_anova_PSD_dB, parametric=TRUE, sphericity_correction="greenhouse-geisser")
# Conversion to long format
data_PSD_SNR_long = dataframe_wide_to_long(data_PSD[,c("ID","W_SNR40_con","N2_SNR40_con","N3_SNR40_con","REM_SNR40_con","W_SNR40_exp","N2_SNR40_exp","N3_SNR40_exp","REM_SNR40_exp")])
# Median SNR values per condition
medians_PSD_SNR = aggregate(value ~ stage * condition, data_PSD_SNR_long, median) # mean likely biased by outliers
print(medians_PSD_SNR, row.names=FALSE)
# Boxplots
plot_box_2X4(data=data_PSD_SNR_long[data_PSD_SNR_long$stage=="W",], title_plot="SNR of 40 Hz Power - Wake", title_y="SNR", ymin=0, ymax=350)
plot_box_2X4(data=data_PSD_SNR_long[data_PSD_SNR_long$stage!="W",], title_plot="SNR of 40 Hz Power - Sleep", title_y="SNR", ymin=0, ymax=18)
test_two_levels(data_SSVEP$W_PTA_exp, data_SSVEP$W_PTA_con, parametric=FALSE, alternative="greater")
# Conversion to long format
data_SSVEP_uV_long = dataframe_wide_to_long(data_SSVEP[,c("ID","W_PTA_con","N2_PTA_con","N3_PTA_con","REM_PTA_con","W_PTA_exp","N2_PTA_exp","N3_PTA_exp","REM_PTA_exp")])
# Boxplot
plot_box_2X4(data=data_SSVEP_uV_long[data_SSVEP_uV_long$stage=="W",], title_plot="SSVEP Amplitude - Wake", title_y="Amplitude (uV)", ymin=0, ymax=4)
test_two_levels(data_SSVEP$N2_PTA_exp, data_SSVEP$N2_PTA_con, parametric=FALSE, alternative="greater")
test_two_levels(data_SSVEP$N3_PTA_exp, data_SSVEP$N3_PTA_con, parametric=TRUE, alternative="greater")
test_two_levels(data_SSVEP$REM_PTA_exp, data_SSVEP$REM_PTA_con, parametric=FALSE, alternative="greater")
plot_box_2X4(data=data_SSVEP_uV_long[data_SSVEP_uV_long$stage!="W",], title_plot="SSVEP Amplitude - Sleep", title_y="Amplitude (uV)", ymin=0, ymax=0.9)
# Get data subset
data_anova_SSVEP_uV = subset(data_SSVEP_uV_long, condition=="exp", select=c(ID,stage,value))
# Run statistical test
test_multiple_levels(data_anova_SSVEP_uV, parametric=FALSE, sphericity_correction="none")
test_multiple_levels <- function(data_ID_factor_value, parametric, sphericity_correction) {
# Change column names for formula format
colnames(data_ID_factor_value) = c("ID","factor","value")
if (parametric == TRUE){
cat("RESULTS: REPEATED-MEASURES ANOVA\n")
# Model
results = lme(value~factor, random=~1|ID, data=data_ID_factor_value, method="ML")
# Table for interpretation of results
anova_table = Anova(results, type="III", correction=sphericity_correction)
# print(anova_table)
p_value = anova_table["factor","Pr(>Chisq)"]
cat("\nP-value:",p_value,"\n\n")
# Effect size
effect = eta_squared(results, partial=TRUE) # Partial eta-squared
effect_size = effect$Eta2_partial
print(effect[,2:4]) # ignore first column
# Post-hoc tests
post_hoc_tests = pairwise.t.test(data_ID_factor_value$value, data_ID_factor_value$factor, alternative=c("two.sided"), p.adj="bonf")
} else {
cat("RESULTS: FRIEDMAN TEST\n")
results = friedman.test(value~factor|ID, data=data_ID_factor_value)
effect = kendalls_w(value~factor|ID, data=data_ID_factor_value) # Kendall's W
effect_size = effect$Kendalls_W
print(effect)
post_hoc_tests = pairwise.wilcox.test(data_ID_factor_value$value, data_ID_factor_value$factor, alternative=c("two.sided"), p.adj = "bonf")
print(results)
}
cat("\nBonferroni-corrected post-hoc tests:\n")
print(post_hoc_tests$p.value)
# return(list(results, effect_size, post_hoc_tests))
}
# Run statistical test
test_multiple_levels(data_anova_SSVEP_uV, parametric=FALSE, sphericity_correction="none")
data_ID_factor_value = data_anova_SSVEP_uV
# Change column names for formula format
colnames(data_ID_factor_value) = c("ID","factor","value")
results = friedman.test(value~factor|ID, data=data_ID_factor_value)
View(results)
cat("RESULTS: FRIEDMAN TEST\n")
= friedman.test(value~factor|ID, data=data_ID_factor_value)
cat("RESULTS: FRIEDMAN TEST\n")
results = friedman.test(value~factor|ID, data=data_ID_factor_value)
p_value = results$p.value
cat("\nP-value:",p_value,"\n\n")
effect = kendalls_w(value~factor|ID, data=data_ID_factor_value) # Kendall's W
effect_size = effect$Kendalls_W
print(effect)
post_hoc_tests = pairwise.wilcox.test(data_ID_factor_value$value, data_ID_factor_value$factor, alternative=c("two.sided"), p.adj = "bonf")
print(results)
cat("RESULTS: FRIEDMAN TEST\n")
results = friedman.test(value~factor|ID, data=data_ID_factor_value)
p_value = results$p.value
cat("\nP-value:",p_value,"\n\n")
effect = kendalls_w(value~factor|ID, data=data_ID_factor_value) # Kendall's W
effect_size = effect$Kendalls_W
print(effect)
post_hoc_tests = pairwise.wilcox.test(data_ID_factor_value$value, data_ID_factor_value$factor, alternative=c("two.sided"), p.adj = "bonf")
tinytex::install_tinytex()
