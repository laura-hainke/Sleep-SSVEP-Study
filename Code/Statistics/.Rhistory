panel.grid.major.x = element_blank(),
plot.title = element_text(size=rel(3), hjust=0.7),
plot.margin = margin(0.5,0.5,0.5,0.5, "cm")) # Plot margins
ggplot(data_REM_lat_long, aes(x=condition, y=value)) +
geom_violinhalf(aes(fill=condition), flip=1) + # Violin plot shape
geom_point(color="grey", size=2) + # Data points, jittered
geom_line(aes(group = ID), color="grey", linewidth=0.5) + # connect paired dots
stat_summary(fun = "mean", geom="point", shape=18, color = "black", size=5) + # Add mean as point
labs(title="REM Sleep Latency", x="Condition", y="Minutes") + # Labels
scale_fill_manual(values=c(colour_scheme$con, colour_scheme$exp), guide="none") + # Condition colours, remove legend
scale_x_discrete(labels=c("Control","Experimental")) + # X-tick labels
# scale_y_continuous(limits=c(315,460),breaks=c(320,390,460)) +
coord_fixed(ratio=0.015) +
theme_minimal(base_size=base_size) + # Background
theme(axis.title.x = element_text(size=rel(2), vjust=-1), # Label sizes, relative
axis.title.y = element_text(size=rel(2), vjust=2),
axis.text = element_text(size=rel(1.7)),
panel.grid.major.x = element_blank(),
plot.title = element_text(size=rel(3), hjust=0.7),
plot.margin = margin(0.5,0.5,0.5,0.5, "cm")) # Plot margins
ggplot(medians_REMs, aes(x=condition,y=variable,fill=value)) +
geom_tile(color = "white",lwd = 1.5) +
geom_text(aes(label=round(value, 2)), color = "white", size = 5, fontface="bold") +
scale_fill_gradient(low="grey", high="#6082B6") +
labs(title="Rapid-Eye Movements", x="", y="") + # Labels
scale_x_discrete(labels=c("Control","Experimental")) + # x-axis tick labels
coord_fixed(ratio=1) +
theme_minimal(base_size = base_size) + # Background
theme(axis.text = element_text(size=rel(1.7)),
legend.position = 'none',
panel.grid = element_blank(),
plot.title = element_text(size=rel(3), hjust=-0.2),
plot.margin = margin(0.5,0.5,0.5,0.5, "cm")) # Plot margins
ggplot(medians_spindles, aes(x=condition,y=variable,fill=value)) +
geom_tile(color = "white",lwd = 1.5) +
geom_text(aes(label=round(value, 2)), color = "white", size = 5, fontface="bold") +
scale_fill_gradient(low="grey", high="#6082B6") +
labs(title="Spindles", x="", y="") + # Labels
scale_x_discrete(labels=c("Control","Experimental")) + # x-axis tick labels
coord_fixed(ratio=1) +
theme_minimal(base_size = base_size) + # Background
theme(axis.text = element_text(size=rel(1.7)),
legend.position = 'none',
panel.grid = element_blank(),
plot.title = element_text(size=rel(3), hjust=0.08),
plot.margin = margin(0.5,0.5,0.5,0.5, "cm")) # Plot margins
ggplot(medians_SOs, aes(x=condition,y=variable,fill=value)) +
geom_tile(color = "white",lwd = 1.5) +
geom_text(aes(label=round(value, 2)), color = "white", size = 5, fontface="bold") +
scale_fill_gradient(low="grey", high="#6082B6") +
labs(title="Slow Oscillations", x="", y="") + # Labels
scale_x_discrete(labels=c("Control","Experimental")) + # x-axis tick labels
coord_fixed(ratio=1) +
theme_minimal(base_size = base_size) + # Background
theme(axis.text = element_text(size=rel(1.7)),
legend.position = 'none',
panel.grid = element_blank(),
plot.title = element_text(size=rel(3), hjust=0.6),
plot.margin = margin(0.5,0.5,0.5,0.5, "cm")) # Plot margins
knitr::opts_chunk$set(echo=FALSE, fig.height=4.5, fig.width=7, fig.align="left")
# Working directory
setwd("C:\\Users\\Mitarbeiter\\Documents\\Gamma_Sleep\\Github_Repo\\Gamma-Sleep\\Code\\Statistics")
# Function files in current directory
source("GammaSleep_statistics_functions.r")
source("GammaSleep_data-handling_functions.r")
# Libraries
library(chron)
library(ggplot2)
library(tidyr)
library(dplyr)
library(reshape2)
library(scales)
library(see)
# For plots
colour_scheme=data.frame(con="#708090",
exp="#8f2d56",
W="#C9CC00",
N1="#97D1F4",
N2="#74BBE8",
N3="#2B8DCA",
REM="#158774")
nr_datapoints_SSVEP = 25 # 25 ms segments
nr_conditions = 2 # control, experimental
nr_stages = 4 # W, N2, N3, REM (N1 not included)
base_size = 7 # base size of plot text
## Global variables
# Using global environment (<<- assignment) to avoid redundant function arguments
# Path to folders with derivative data
path_derivatives <<- "C:\\Users\\Mitarbeiter\\Documents\\Gamma_Sleep\\Data\\Derivatives\\"
# List of folder names in directory, corresponding to participant numbers
list_IDs <<- list.dirs(path = path_derivatives, full.names = FALSE, recursive = FALSE)
# Remove rejected datasets
list_IDs <<- list_IDs[! list_IDs %in% c("03","15")] # subjects 03 and 15 were drop-outs
## Initializing
data_demo <<- initialize_dataframe("demographic")
data_sleep <<- initialize_dataframe("sleep_quality")
data_sleep_extra <<- initialize_dataframe("sleep_supplementary")
data_PSD <<- initialize_dataframe("PSD_metrics")
data_SSVEP <<- initialize_dataframe("SSVEP_metrics")
## Loading data
load_derivative_data()
# Initialize
descriptive_PSD40 = data.frame(Mean_dB_con=rep(NA,4),
Mean_dB_exp=rep(NA,4),
SD_dB_con=rep(NA,4),
SD_dB_exp=rep(NA,4),
Mean_nr_epochs_con=rep(NA,4),
Mean_nr_epochs_exp=rep(NA,4))
stages = c("W","N2","N3","REM")
row.names(descriptive_PSD40) = stages
# Fill
ctr_con = 3 # counter starting at column 3 of data_PSD
ctr_exp = 15 # counter starting at column 15 of data_PSD
for (s in stages) {
descriptive_PSD40[s,"Mean_dB_con"] = round(mean(data_PSD[,ctr_con]),2)
descriptive_PSD40[s,"Mean_dB_exp"] = round(mean(data_PSD[,ctr_exp]),2)
descriptive_PSD40[s,"SD_dB_con"] = round(sd(data_PSD[,ctr_con]),2)
descriptive_PSD40[s,"SD_dB_exp"] = round(sd(data_PSD[,ctr_exp]),2)
descriptive_PSD40[s,"Mean_nr_epochs_con"] = round(mean(data_PSD[,ctr_con-1]),2)
descriptive_PSD40[s,"Mean_nr_epochs_exp"] = round(mean(data_PSD[,ctr_exp-1]),2)
ctr_con = ctr_con+3
ctr_exp = ctr_exp+3
}
print(descriptive_PSD40)
# Conversion to long format
data_nr_epochs_long = dataframe_wide_to_long(data_PSD[,c("ID","N2_nepochs_exp","N3_nepochs_exp","REM_nepochs_exp")])
data_nr_epochs_long$value = data_nr_epochs_long$value/2 # convert nr. of epochs into minutes
ggplot(data_nr_epochs_long, aes(x=stage, y=value, fill=stage)) +
geom_boxplot(show.legend = FALSE) +
geom_point(size=1, position=position_dodge(0.75)) + # add individual data points
stat_summary(fun = "mean", geom = "point", size = 2, color = "white", position = position_dodge(0.75)) + # add mean
annotate("segment", x=0.63, y=240, xend=1.38, yend=240, linetype="dashed", color="#899499", linewidth=0.7) + # add max. expected stimulation time for N2
annotate("segment", x=1.63, y=96, xend=2.38, yend=96, linetype="dashed", color="#899499", linewidth=0.7) + # add max. expected stimulation time for N3
annotate("segment", x=2.63, y=120, xend=3.38, yend=120, linetype="dashed", color="#899499", linewidth=0.7) + # add max. expected stimulation time for REM
scale_fill_manual(values=c(colour_scheme$N2, colour_scheme$N3, colour_scheme$REM)) +
labs(title="Stimulation Duration per Stage (Experimental)", x="Stage", y="Minutes") + # Labels
theme_minimal(base_size = base_size) + # Background
theme(axis.title.x = element_text(size=rel(2), vjust=-1), # Label sizes, relative
axis.title.y = element_text(size=rel(2), vjust=2),
axis.text = element_text(size=rel(1.7)),
panel.grid.major.x = element_blank(),
plot.title = element_text(size=rel(3)),
plot.margin = margin(0.5,0.5,0.5,0.5, "cm"), # Plot margins
legend.position = "none")
check_normality(data_PSD$W_PSD40_exp - data_PSD$W_PSD40_con, plot=FALSE)
check_outliers(data_PSD$W_PSD40_con, plot=FALSE)
check_outliers(data_PSD$W_PSD40_exp, plot=FALSE)
H1a_results = test_two_levels(data_PSD$W_PSD40_exp, data_PSD$W_PSD40_con, parametric=TRUE, alternative="greater", verbose=FALSE)
check_normality(data_PSD$N2_PSD40_exp - data_PSD$N2_PSD40_con, plot=FALSE)
check_outliers(data_PSD$N2_PSD40_con, plot=FALSE)
check_outliers(data_PSD$N2_PSD40_exp, plot=FALSE)
H2a_results = test_two_levels(data_PSD$N2_PSD40_exp, data_PSD$N2_PSD40_con, parametric=TRUE, alternative="greater", verbose=FALSE)
check_normality(data_PSD$N3_PSD40_exp - data_PSD$N3_PSD40_con, plot=FALSE)
check_outliers(data_PSD$N3_PSD40_con, plot=FALSE)
check_outliers(data_PSD$N3_PSD40_exp, plot=FALSE)
H3a_results = test_two_levels(data_PSD$N3_PSD40_exp, data_PSD$N3_PSD40_con, parametric=TRUE, alternative="greater", verbose=FALSE)
check_normality(data_PSD$REM_PSD40_exp - data_PSD$REM_PSD40_con, plot=FALSE)
check_outliers(data_PSD$REM_PSD40_con, plot=FALSE)
check_outliers(data_PSD$REM_PSD40_exp, plot=FALSE)
H4a_results = test_two_levels(data_PSD$REM_PSD40_exp, data_PSD$REM_PSD40_con, parametric=FALSE, alternative="greater", verbose=FALSE)
# Conversion to long format
data_PSD_dB_long = dataframe_wide_to_long(data_PSD[,c("ID","W_PSD40_con","N2_PSD40_con","N3_PSD40_con","REM_PSD40_con","W_PSD40_exp","N2_PSD40_exp","N3_PSD40_exp","REM_PSD40_exp")])
ggplot(data_PSD_dB_long, aes(x=factor(stage, levels=c("W","N2","N3","REM")), y=value, fill=condition)) +
geom_boxplot() + # Show condition pairs per stage
geom_label(aes(x=stage, y=-147, label=condition), position=position_dodge(0.75), label.size=NA, alpha=0, colour="#818589") +
geom_point(size=1, position=position_dodge(0.75)) + # add individual data points
stat_summary(fun = "mean", geom = "point", size = 2, color = "white", position = position_dodge(0.75)) + # add mean
scale_fill_manual(values=c(colour_scheme$con,colour_scheme$exp)) +
labs(title="40 Hz Power", x="Stage", y="Power (dB)", fill="Condition") + # Labels
theme_minimal(base_size = base_size) + # Background
theme(axis.title.x = element_text(size=rel(2), vjust=-1), # Label sizes, relative
axis.title.y = element_text(size=rel(2), vjust=2),
axis.text.x = element_text(size=rel(1.7), face="bold"),
axis.text.y = element_text(size=rel(1.7)),
legend.position = 'none',
panel.grid.major.x = element_blank(),
plot.title = element_text(size=rel(3)),
plot.margin = margin(0.5,0.5,0.5,0.5, "cm")) # Plot margins
check_normality(data_PSD$W_PSD40_exp, plot=FALSE)
check_normality(data_PSD$N2_PSD40_exp, plot=FALSE)
check_normality(data_PSD$N3_PSD40_exp, plot=FALSE)
check_normality(data_PSD$REM_PSD40_exp, plot=FALSE)
check_outliers(data_PSD$W_PSD40_exp, plot=FALSE)
check_outliers(data_PSD$N2_PSD40_exp, plot=FALSE)
check_outliers(data_PSD$N3_PSD40_exp, plot=FALSE)
check_outliers(data_PSD$REM_PSD40_exp, plot=FALSE)
check_sphericity(data_PSD[,c("W_PSD40_exp","N2_PSD40_exp","N3_PSD40_exp","REM_PSD40_exp")])
# Get data subset
data_anova_PSD_dB = subset(data_PSD_dB_long, condition=="exp", select=c(ID,stage,value))
# Run statistical test
H5a_results = test_multiple_levels(data_anova_PSD_dB, parametric=TRUE, sphericity_correction="greenhouse-geisser", verbose=FALSE)
# Conversion to long format
data_PSD_SNR_long = dataframe_wide_to_long(data_PSD[,c("ID","W_SNR40_con","N2_SNR40_con","N3_SNR40_con","REM_SNR40_con","W_SNR40_exp","N2_SNR40_exp","N3_SNR40_exp","REM_SNR40_exp")])
# Median SNR values per condition
medians_PSD_SNR = aggregate(value ~ stage * condition, data_PSD_SNR_long, median) # mean likely biased by outliers
print(medians_PSD_SNR, row.names=FALSE)
ggplot(medians_PSD_SNR, aes(x=condition,y=stage,fill=value)) +
geom_tile(color = "white",lwd = 1.5) +
geom_text(aes(label=round(value, 2)), color = "white", size = 4, fontface="bold") +
scale_fill_gradient(low="grey", high="#6082B6") +
labs(title="SNR of 40 Hz Power", x="Condition", y="Stage") + # Labels
coord_fixed(ratio=0.8) +
theme_minimal(base_size = base_size) + # Background
theme(axis.title.x = element_text(size=rel(2), vjust=-1), # Label sizes, relative
axis.title.y = element_text(size=rel(2), vjust=2),
axis.text = element_text(size=rel(1.7)),
legend.position = 'none',
panel.grid = element_blank(),
plot.title = element_text(size=rel(3)),
plot.margin = margin(0.5,0.5,0.5,0.5, "cm")) # Plot margins
check_normality(data_sleep$GSQS_exp - data_sleep$GSQS_con, plot=FALSE)
check_outliers(data_sleep$GSQS_con, plot=FALSE)
check_outliers(data_sleep$GSQS_exp, plot=FALSE)
H6_results = test_two_levels(data_sleep$GSQS_con, data_sleep$GSQS_exp, parametric=TRUE, alternative="two.sided", verbose=FALSE)
# Conversion to long format
data_GSQS_long = dataframe_wide_to_long(data_sleep[,c("ID","GSQS_con","GSQS_exp")])
ggplot(data_GSQS_long, aes(x=condition, y=value)) +
geom_violinhalf(aes(fill=condition), flip=1) + # Violin plot shape
geom_point(color="grey", size=2) + # Data points, jittered
geom_line(aes(group = ID), color="grey", linewidth=0.5) + # connect paired dots
stat_summary(fun = "mean", geom="point", shape=18, color = "black", size=5) + # Add mean as point
labs(title="Groningen Sleep Quality Scale", x="Condition", y="GSQS Sum Score") + # Labels
scale_fill_manual(values=c(colour_scheme$con, colour_scheme$exp), guide="none") + # Condition colours, remove legend
scale_x_discrete(labels=c("Control","Experimental")) + # X-tick labels
coord_fixed(ratio=0.15) +
theme_minimal(base_size=base_size) + # Background
theme(axis.title.x = element_text(size=rel(2), vjust=-1), # Label sizes, relative
axis.title.y = element_text(size=rel(2), vjust=2),
axis.text = element_text(size=rel(1.7)),
panel.grid.major = element_blank(),
plot.title = element_text(size=rel(3)),
plot.margin = margin(0.5,0.5,0.5,0.5, "cm")) # Plot margins
check_normality(data_sleep$TST_exp - data_sleep$TST_con, plot=FALSE)
check_outliers(data_sleep$TST_con, plot=FALSE)
check_outliers(data_sleep$TST_exp, plot=FALSE)
H7_results = test_two_levels(data_sleep$TST_exp, data_sleep$TST_con, parametric=TRUE, alternative="two.sided", verbose=FALSE)
# Conversion to long format
data_TST_long = dataframe_wide_to_long(data_sleep[,c("ID","TST_con","TST_exp")])
# Plot
ggplot(data_TST_long, aes(x=condition, y=value)) +
geom_violinhalf(aes(fill=condition), flip=1) + # Violin plot shape
geom_point(color="grey", size=2) + # Data points, jittered
geom_line(aes(group = ID), color="grey", linewidth=0.5) + # connect paired dots
stat_summary(fun = "mean", geom="point", shape=18, color = "black", size=5) + # Add mean as point
labs(title="Total Sleep Time", x="Condition", y="Minutes") + # Labels
scale_fill_manual(values=c(colour_scheme$con, colour_scheme$exp), guide="none") + # Condition colours, remove legend
scale_x_discrete(labels=c("Control","Experimental")) + # X-tick labels
scale_y_continuous(limits=c(315,460),breaks=c(320,390,460)) +
coord_fixed(ratio=0.015) +
theme_minimal(base_size=base_size) + # Background
theme(axis.title.x = element_text(size=rel(2), vjust=-1), # Label sizes, relative
axis.title.y = element_text(size=rel(2), vjust=2),
axis.text = element_text(size=rel(1.7)),
panel.grid.major.x = element_blank(),
plot.title = element_text(size=rel(3)),
plot.margin = margin(0.5,0.5,0.5,0.5, "cm")) # Plot margins
check_normality(data_sleep$WASO_exp - data_sleep$WASO_con, plot=FALSE)
check_outliers(data_sleep$WASO_con, plot=FALSE)
check_outliers(data_sleep$WASO_exp, plot=FALSE)
H8_results = test_two_levels(data_sleep$WASO_exp, data_sleep$WASO_con, parametric=TRUE, alternative="two.sided", verbose=FALSE)
# Conversion to long format
data_WASO_long = dataframe_wide_to_long(data_sleep[,c("ID","WASO_con","WASO_exp")])
# Plot
ggplot(data_WASO_long, aes(x=condition, y=value)) +
geom_violinhalf(aes(fill=condition), flip=1) + # Violin plot shape
geom_point(color="grey", size=2) + # Data points, jittered
geom_line(aes(group = ID), color="grey", linewidth=0.5) + # connect paired dots
stat_summary(fun = "mean", geom="point", shape=18, color = "black", size=5) + # Add mean as point
labs(title="Wake After Sleep Onset", x="Condition", y="Minutes") + # Labels
scale_fill_manual(values=c(colour_scheme$con, colour_scheme$exp), guide="none") + # Condition colours, remove legend
scale_x_discrete(labels=c("Control","Experimental")) + # X-tick labels
scale_y_continuous(limits=c(10,140),breaks=c(10,70,130)) +
coord_fixed(ratio=0.015) +
theme_minimal(base_size=base_size) + # Background
theme(axis.title.x = element_text(size=rel(2), vjust=-1), # Label sizes, relative
axis.title.y = element_text(size=rel(2), vjust=2),
axis.text = element_text(size=rel(1.7)),
panel.grid.major.x = element_blank(),
plot.title = element_text(size=rel(3)),
plot.margin = margin(0.5,0.5,0.5,0.5, "cm")) # Plot margins
# Conversion to long format
data_percent_stages_long = dataframe_wide_to_long(data_sleep[,c("ID","perN1_con","perN2_con","perN3_con","perREM_con","perN1_exp","perN2_exp","perN3_exp","perREM_exp")])
# Stacked bar graph of % time per stage
ggplot(data_percent_stages_long, aes(x=condition, y=value, fill=variable)) +
geom_bar(stat="identity", position = position_fill(reverse = TRUE), width=0.5) + # Start with N1
labs(title="Sleep Stage Distribution", x="", y="Time per Stage (% of TST)", fill="Stage") + # Labels
annotate(geom="text", x=0.85, y=0.025, label="N1", colour="white", fontface="bold") +
annotate(geom="text", x=0.85, y=0.11, label="N2", colour="white", fontface="bold") +
annotate(geom="text", x=0.85, y=0.645, label="N3", colour="white", fontface="bold") +
annotate(geom="text", x=0.85, y=0.835, label="REM", colour="white", fontface="bold") +
scale_x_discrete(labels=c("Control","Experimental")) + # X-tick labels
scale_fill_manual(values=c(colour_scheme$N1, colour_scheme$N2, colour_scheme$N3, colour_scheme$REM), labels=c("N1","N2","N3","REM")) + # Stage colours & labels
scale_y_continuous(labels = percent) + # Y-tick values
theme_minimal(base_size = base_size) + # Background
coord_flip() + # Flip x & y axes
theme(axis.title.x = element_text(size=rel(2), vjust=-1), # Label sizes, relative
axis.text.x = element_text(size=rel(1.7)),
axis.text.y = element_text(size=rel(1.7), face="bold"),
plot.title = element_text(size=rel(3)),
legend.position = 'none',
plot.margin = margin(0.5,0.5,0.5,0.5, "cm")) # Plot margins
# Initialize
descriptive_SSVEPamp = data.frame(Mean_uV_con=rep(NA,4),
Mean_uV_exp=rep(NA,4),
SD_uV_con=rep(NA,4),
SD_uV_exp=rep(NA,4),
Mean_nr_segments_con=rep(NA,4),
Mean_nr_segments_exp=rep(NA,4))
stages = c("W","N2","N3","REM")
row.names(descriptive_SSVEPamp) = stages
# Fill
ctr_con = 3 # counter starting at column 3 of data_SSVEP
ctr_exp = 15 # counter starting at column 15 of data_SSVEP
for (s in stages) {
descriptive_SSVEPamp[s,"Mean_uV_con"] = round(mean(data_SSVEP[,ctr_con]),2)
descriptive_SSVEPamp[s,"Mean_uV_exp"] = round(mean(data_SSVEP[,ctr_exp]),2)
descriptive_SSVEPamp[s,"SD_uV_con"] = round(sd(data_SSVEP[,ctr_con]),2)
descriptive_SSVEPamp[s,"SD_uV_exp"] = round(sd(data_SSVEP[,ctr_exp]),2)
descriptive_SSVEPamp[s,"Mean_nr_segments_con"] = round(mean(data_SSVEP[,ctr_con-1]),2)
descriptive_SSVEPamp[s,"Mean_nr_segments_exp"] = round(mean(data_SSVEP[,ctr_exp-1]),2)
ctr_con = ctr_con+3
ctr_exp = ctr_exp+3
}
print(descriptive_SSVEPamp)
check_normality(data_SSVEP$W_PTA_exp - data_SSVEP$W_PTA_con, plot=FALSE)
check_outliers(data_SSVEP$W_PTA_con, plot=FALSE)
check_outliers(data_SSVEP$W_PTA_exp, plot=FALSE)
H1b_results = test_two_levels(data_SSVEP$W_PTA_exp, data_SSVEP$W_PTA_con, parametric=FALSE, alternative="greater", verbose=FALSE)
check_normality(data_SSVEP$N2_PTA_exp - data_SSVEP$N2_PTA_con, plot=FALSE)
check_outliers(data_SSVEP$N2_PTA_con, plot=FALSE)
check_outliers(data_SSVEP$N2_PTA_exp, plot=FALSE)
H2b_results = test_two_levels(data_SSVEP$N2_PTA_exp, data_SSVEP$N2_PTA_con, parametric=FALSE, alternative="greater", verbose=FALSE)
check_normality(data_SSVEP$N3_PTA_exp - data_SSVEP$N3_PTA_con, plot=FALSE)
check_outliers(data_SSVEP$N3_PTA_con, plot=FALSE)
check_outliers(data_SSVEP$N3_PTA_exp, plot=FALSE)
H3b_results = test_two_levels(data_SSVEP$N3_PTA_exp, data_SSVEP$N3_PTA_con, parametric=TRUE, alternative="greater", verbose=FALSE)
check_normality(data_SSVEP$REM_PTA_exp - data_SSVEP$REM_PTA_con, plot=FALSE)
check_outliers(data_SSVEP$REM_PTA_con, plot=FALSE)
check_outliers(data_SSVEP$REM_PTA_exp, plot=FALSE)
H4b_results = test_two_levels(data_SSVEP$REM_PTA_exp, data_SSVEP$REM_PTA_con, parametric=FALSE, alternative="greater", verbose=FALSE)
check_normality(data_SSVEP$W_PTA_exp, plot=FALSE)
check_normality(data_SSVEP$N2_PTA_exp, plot=FALSE)
check_normality(data_SSVEP$N3_PTA_exp, plot=FALSE)
check_normality(data_SSVEP$REM_PTA_exp, plot=FALSE)
check_outliers(data_SSVEP$W_PTA_exp, plot=FALSE)
check_outliers(data_SSVEP$N2_PTA_exp, plot=FALSE)
check_outliers(data_SSVEP$N3_PTA_exp, plot=FALSE)
check_outliers(data_SSVEP$REM_PTA_exp, plot=FALSE)
check_sphericity(data_SSVEP[,c("W_PTA_exp","N2_PTA_exp","N3_PTA_exp","REM_PTA_exp")])
# Conversion to long format
data_SSVEP_uV_long = dataframe_wide_to_long(data_SSVEP[,c("ID","W_PTA_con","N2_PTA_con","N3_PTA_con","REM_PTA_con","W_PTA_exp","N2_PTA_exp","N3_PTA_exp","REM_PTA_exp")])
# Get data subset
data_anova_SSVEP_uV = subset(data_SSVEP_uV_long, condition=="exp", select=c(ID,stage,value))
# Run statistical test
H5b_results = test_multiple_levels(data_anova_SSVEP_uV, parametric=FALSE, sphericity_correction="none", verbose=FALSE)
# Conversion to long format
data_SSVEP_SNR_long = dataframe_wide_to_long(data_SSVEP[,c("ID","W_SNR_con","N2_SNR_con","N3_SNR_con","REM_SNR_con","W_SNR_exp","N2_SNR_exp","N3_SNR_exp","REM_SNR_exp")])
# Median SNR values per condition
medians_SSVEP_SNR = aggregate(value ~ stage * condition, data_SSVEP_SNR_long, median) # mean likely biased by outliers
print(medians_SSVEP_SNR, row.names=FALSE)
ggplot(medians_SSVEP_SNR, aes(x=condition,y=stage,fill=value)) +
geom_tile(color = "white",lwd = 1.5) +
geom_text(aes(label=round(value, 2)), color = "white", size = 4, fontface="bold") +
scale_fill_gradient(low="grey", high="#6082B6") +
labs(title="SNR of SSVEPs", x="Condition", y="Stage") + # Labels
coord_fixed(ratio=0.8) +
theme_minimal(base_size = base_size) + # Background
theme(axis.title.x = element_text(size=rel(2), vjust=-1), # Label sizes, relative
axis.title.y = element_text(size=rel(2), vjust=2),
axis.text = element_text(size=rel(1.7)),
legend.position = 'none',
panel.grid = element_blank(),
plot.title = element_text(size=rel(3)),
plot.margin = margin(0.5,0.5,0.5,0.5, "cm")) # Plot margins
# All SSVEP time series data in long format
timeseries_SSVEPs = import_SSVEPs_to_long_dataframe()
# Collapse data over subjects
data_SSVEPs_avg = timeseries_SSVEPs %>% group_by(time,stage,condition) %>% summarise_at(vars("value"), mean)
ggplot(data_SSVEPs_avg[data_SSVEPs_avg$stage=="W",], aes(x=time, y=value, color=condition)) +
geom_line(linewidth=1.5) +
facet_wrap(~factor(stage), strip.position = "bottom") +
labs(title="Average SSVEPs", y="Amplitude (uV)", x="Time (ms)") +
scale_x_continuous(limits=c(0,25), breaks=c(0,12.5,25)) +
scale_color_manual(name="Condition", values=c(colour_scheme$con,colour_scheme$W), labels=c("Control","Experimental")) +
ylim(-0.4,0.4) +
theme_minimal(base_size=base_size) +
theme(panel.grid.minor = element_blank(), # remove background lines
strip.text.x = element_text(size=rel(2), face="bold"),
axis.title.x = element_text(size=rel(2), vjust=-1), # Label sizes, relative
axis.title.y = element_text(size=rel(2), vjust=1.5),
axis.text = element_text(size=rel(1.7)),
legend.position = 'none',
plot.title = element_text(size=rel(3), vjust=1.5),
plot.margin = margin(0.5,0.5,0.5,0.5,"cm"))
ggplot(data_SSVEPs_avg[data_SSVEPs_avg$stage!="W",], aes(x=time, y=value, color=condition)) +
geom_line(linewidth=1.5) +
facet_wrap(~factor(stage), strip.position = "bottom") +
labs(title="Average SSVEPs", y="Amplitude (uV)", x="Time (ms)") +
scale_x_continuous(limits=c(0,25), breaks=c(0,12.5,25)) +
scale_color_manual(name="Condition", values=c(colour_scheme$con,colour_scheme$exp), labels=c("Control","Experimental")) +
ylim(-0.05,0.05) +
theme_minimal(base_size=base_size) +
theme(panel.grid.minor = element_blank(), # remove background lines
strip.text.x = element_text(size=rel(2), face="bold"),
axis.title.x = element_text(size=rel(2), vjust=-1), # Label sizes, relative
axis.title.y = element_text(size=rel(2), vjust=1.5),
axis.text = element_text(size=rel(1.7)),
legend.text = element_text(size=rel(1.7)),
legend.title = element_text(size=rel(1.7)),
plot.title = element_text(size=rel(3), vjust=1.5),
plot.margin = margin(0.5,0.5,0.5,0.5,"cm"))
check_normality(data_sleep$REM_lat_exp - data_sleep$REM_lat_con, plot=FALSE)
check_outliers(data_sleep$REM_lat_con, plot=FALSE)
check_outliers(data_sleep$REM_lat_exp, plot=FALSE)
REM_lat_results = test_two_levels(data_sleep$REM_lat_exp, data_sleep$REM_lat_con, parametric=TRUE, alternative="two.sided", verbose=FALSE)
# Conversion to long format
data_REM_lat_long = dataframe_wide_to_long(data_sleep[2:30,c("ID","REM_lat_con","REM_lat_exp")]) # excluding participant 1, NA
# Plot
ggplot(data_REM_lat_long, aes(x=condition, y=value)) +
geom_violinhalf(aes(fill=condition), flip=1) + # Violin plot shape
geom_point(color="grey", size=2) + # Data points, jittered
geom_line(aes(group = ID), color="grey", linewidth=0.5) + # connect paired dots
stat_summary(fun = "mean", geom="point", shape=18, color = "black", size=5) + # Add mean as point
labs(title="REM Sleep Latency", x="Condition", y="Minutes") + # Labels
scale_fill_manual(values=c(colour_scheme$con, colour_scheme$exp), guide="none") + # Condition colours, remove legend
scale_x_discrete(labels=c("Control","Experimental")) + # X-tick labels
# scale_y_continuous(limits=c(315,460),breaks=c(320,390,460)) +
coord_fixed(ratio=0.015) +
theme_minimal(base_size=base_size) + # Background
theme(axis.title.x = element_text(size=rel(2), vjust=-1), # Label sizes, relative
axis.title.y = element_text(size=rel(2), vjust=2),
axis.text = element_text(size=rel(1.7)),
panel.grid.major.x = element_blank(),
plot.title = element_text(size=rel(3), hjust=0.7),
plot.margin = margin(0.5,0.5,0.5,0.5, "cm")) # Plot margins
REMs_long = dataframe_wide_to_long(data_sleep_extra[,c("ID","REMs_count_con","REMs_amplitude_con","REMs_density_con","REMs_count_exp","REMs_amplitude_exp","REMs_density_exp")])
# Median SNR values per condition
medians_REMs = aggregate(value ~ variable * condition, REMs_long, median) # mean likely biased by outliers
ggplot(medians_REMs, aes(x=condition,y=variable,fill=value)) +
geom_tile(color = "white",lwd = 1.5) +
geom_text(aes(label=round(value, 2)), color = "white", size = 5, fontface="bold") +
scale_fill_gradient(low="grey", high="#6082B6") +
labs(title="Rapid-Eye Movements", x="", y="") + # Labels
scale_x_discrete(labels=c("Control","Experimental")) + # x-axis tick labels
coord_fixed(ratio=1) +
theme_minimal(base_size = base_size) + # Background
theme(axis.text = element_text(size=rel(1.7)),
legend.position = 'none',
panel.grid = element_blank(),
plot.title = element_text(size=rel(3), hjust=-0.2),
plot.margin = margin(0.5,0.5,0.5,0.5, "cm")) # Plot margins
spindles_long = dataframe_wide_to_long(data_sleep_extra[,c("ID","Spindles_count_con","Spindles_amplitude_con","Spindles_frequency_con","Spindles_count_exp","Spindles_amplitude_exp","Spindles_frequency_exp")])
# Median SNR values per condition
medians_spindles = aggregate(value ~ variable * condition, spindles_long, median) # mean likely biased by outliers
ggplot(medians_spindles, aes(x=condition,y=variable,fill=value)) +
geom_tile(color = "white",lwd = 1.5) +
geom_text(aes(label=round(value, 2)), color = "white", size = 5, fontface="bold") +
scale_fill_gradient(low="grey", high="#6082B6") +
labs(title="Spindles", x="", y="") + # Labels
scale_x_discrete(labels=c("Control","Experimental")) + # x-axis tick labels
coord_fixed(ratio=1) +
theme_minimal(base_size = base_size) + # Background
theme(axis.text = element_text(size=rel(1.7)),
legend.position = 'none',
panel.grid = element_blank(),
plot.title = element_text(size=rel(3), hjust=0.08),
plot.margin = margin(0.5,0.5,0.5,0.5, "cm")) # Plot margins
spindle_count_results = test_two_levels(data_sleep_extra$Spindles_count_exp, data_sleep_extra$Spindles_count_con, parametric=TRUE, alternative="two.sided", verbose=FALSE)
SOs_long = dataframe_wide_to_long(data_sleep_extra[,c("ID","SOs_count_con","SOs_amplitude_con","SOs_frequency_con","SOs_count_exp","SOs_amplitude_exp","SOs_frequency_exp")])
# Median SNR values per condition
medians_SOs = aggregate(value ~ variable * condition, SOs_long, median) # mean likely biased by outliers
ggplot(medians_SOs, aes(x=condition,y=variable,fill=value)) +
geom_tile(color = "white",lwd = 1.5) +
geom_text(aes(label=round(value, 2)), color = "white", size = 5, fontface="bold") +
scale_fill_gradient(low="grey", high="#6082B6") +
labs(title="Slow Oscillations", x="", y="") + # Labels
scale_x_discrete(labels=c("Control","Experimental")) + # x-axis tick labels
coord_fixed(ratio=1) +
theme_minimal(base_size = base_size) + # Background
theme(axis.text = element_text(size=rel(1.7)),
legend.position = 'none',
panel.grid = element_blank(),
plot.title = element_text(size=rel(3), hjust=0.6),
plot.margin = margin(0.5,0.5,0.5,0.5, "cm")) # Plot margins
SO_count_results = test_two_levels(data_sleep_extra$SOs_count_exp, data_sleep_extra$SOs_count_con, parametric=TRUE, alternative="two.sided", verbose=FALSE)
View(data_SSVEP)
View(data_SSVEP)
IQR(data_SSVEP[,3])
help IQR
# Initialize
descriptive_SSVEPamp = data.frame(Median_uV_con=rep(NA,4),
Median_uV_exp=rep(NA,4),
IQR_uV_con=rep(NA,4),
IQR_uV_exp=rep(NA,4),
Mean_nr_segments_con=rep(NA,4),
Mean_nr_segments_exp=rep(NA,4))
stages = c("W","N2","N3","REM")
row.names(descriptive_SSVEPamp) = stages
# Fill
ctr_con = 3 # counter starting at column 3 of data_SSVEP
ctr_exp = 15 # counter starting at column 15 of data_SSVEP
for (s in stages) {
descriptive_SSVEPamp[s,"Median_uV_con"] = round(median(data_SSVEP[,ctr_con]),2)
descriptive_SSVEPamp[s,"Median_uV_exp"] = round(median(data_SSVEP[,ctr_exp]),2)
descriptive_SSVEPamp[s,"IQR_uV_con"] = round(IQR(data_SSVEP[,ctr_con]),2)
descriptive_SSVEPamp[s,"IQR_uV_exp"] = round(IQR(data_SSVEP[,ctr_exp]),2)
descriptive_SSVEPamp[s,"Mean_nr_segments_con"] = round(mean(data_SSVEP[,ctr_con-1]),2)
descriptive_SSVEPamp[s,"Mean_nr_segments_exp"] = round(mean(data_SSVEP[,ctr_exp-1]),2)
ctr_con = ctr_con+3
ctr_exp = ctr_exp+3
}
print(descriptive_SSVEPamp)
