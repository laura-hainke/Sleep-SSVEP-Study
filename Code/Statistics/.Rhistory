# Plot
ggplot(SSVEP, aes(x=X, y=N2_SSVEP)) +
geom_line(linewidth=1) + # plot SSVEP
geom_segment(x=interpolation_timepoints[1], y=-0.09, xend=interpolation_timepoints[2], yend=SSVEP$N2_SSVEP[SSVEP$X==interpolation_timepoints[2]], colour="red", linetype="dashed", size=1.2) + # First interpolation segment
geom_segment(x=interpolation_timepoints[3], y=SSVEP$N2_SSVEP[SSVEP$X==interpolation_timepoints[3]], xend=interpolation_timepoints[4], yend=SSVEP$N2_SSVEP[SSVEP$X==interpolation_timepoints[4]], colour="red", linetype="dashed", size=1.2) + # Second interpolation segment
labs(title="Example SSVEP affected by artifacts", y="Amplitude (uV)", x="Time (ms)") +
scale_x_continuous(limits=c(-1,24), breaks=c(0,5,10,15,20)) +
ylim(-0.12,0.12) +
theme_minimal(base_size=7) +
theme(panel.grid.minor = element_blank(), # remove background lines
strip.text.x = element_text(size=rel(3), face="bold"),
axis.title.x = element_text(size=rel(2), vjust=-1), # Label sizes, relative
axis.title.y = element_text(size=rel(2), vjust=1.5),
axis.text = element_text(size=rel(1.5)),
plot.title = element_text(size=rel(3), vjust=1.5),
plot.margin = margin(0.5,0.5,0.5,0.5, "cm"))
# Load data
SSVEP = read.csv("C:\\Users\\Mitarbeiter\\Documents\\Gamma_Sleep\\Data\\Derivatives_main\\24\\Experimental\\24_experimental_SSVEP-output-curves.csv")
SSVEP = SSVEP[,c(1,3)] # keep time points & SSVEP for N2_exp (most affected)
# Linear interpolation time points
interpolation_timepoints = c(-1,3,11,15)
# Plot
ggplot(SSVEP, aes(x=X, y=N2_SSVEP)) +
geom_line(linewidth=1) + # plot SSVEP
geom_segment(x=interpolation_timepoints[1], y=-0.09, xend=interpolation_timepoints[2], yend=SSVEP$N2_SSVEP[SSVEP$X==interpolation_timepoints[2]], colour="red", linetype="dashed", size=1.2) + # First interpolation segment
geom_segment(x=interpolation_timepoints[3], y=SSVEP$N2_SSVEP[SSVEP$X==interpolation_timepoints[3]], xend=interpolation_timepoints[4], yend=SSVEP$N2_SSVEP[SSVEP$X==interpolation_timepoints[4]], colour="red", linetype="dashed", size=1.2) + # Second interpolation segment
labs(title="Example SSVEP affected by artifacts", y="Amplitude (uV)", x="Time (ms)") +
scale_x_continuous(limits=c(-1,24), breaks=c(0,5,10,15,20,25)) +
ylim(-0.12,0.12) +
theme_minimal(base_size=7) +
theme(panel.grid.minor = element_blank(), # remove background lines
strip.text.x = element_text(size=rel(3), face="bold"),
axis.title.x = element_text(size=rel(2), vjust=-1), # Label sizes, relative
axis.title.y = element_text(size=rel(2), vjust=1.5),
axis.text = element_text(size=rel(1.5)),
plot.title = element_text(size=rel(3), vjust=1.5),
plot.margin = margin(0.5,0.5,0.5,0.5, "cm"))
library(emmeans)
library(stringr)
library(effectsize)
library(car)
library(nlme)
library(superb)
# Working directory
setwd("C:\\Users\\Mitarbeiter\\Documents\\Gamma_Sleep\\Github_Repo\\Gamma-Sleep\\Code\\Statistics")
# Function files in current directory
source("GammaSleep_statistics_functions.r")
source("GammaSleep_plots_functions.r")
source("GammaSleep_data-handling_functions.r")
# Libraries
library(chron)
## Global variables
# Using global environment (<<- assignment) to avoid redundant function arguments
# Path to folders with derivative data
path_derivatives <<- "C:\\Users\\Mitarbeiter\\Documents\\Gamma_Sleep\\Data\\Derivatives_main\\"
# List of folder names in directory, corresponding to participant numbers
list_IDs <<- list.dirs(path = path_derivatives, full.names = FALSE, recursive = FALSE)
# Remove rejected datasets
list_IDs <<- list_IDs[! list_IDs %in% c("03","15")] # subjects 03 and 15 were drop-outs
## Initializing
data_demo <<- initialize_dataframe("demographic")
data_sleep <<- initialize_dataframe("sleep_quality")
data_PSD <<- initialize_dataframe("PSD_metrics")
data_SSVEP <<- initialize_dataframe("SSVEP_metrics")
## Loading data
load_derivative_data()
a = repeated_measures_d(data_PSD$W_PSD40_exp, data_PSD$W_PSD40_con, method="z")
View(a)
# Function files in current directory
source("GammaSleep_statistics_functions.r")
H1a_results = test_two_levels(data_PSD$W_PSD40_exp, data_PSD$W_PSD40_con, parametric=TRUE, alternative="greater")
View(H1a_results)
mean(data_PSD$W_PSD40_con)
round(sd(data_PSD$W_PSD40_exp),2)
_p_=`r round(H1a_results[1],2)`
round(H1a_results[1],2)
H1a_results[1]
H1a_results[[1]]
round(H1a_results[[1]],2)
interpret_cohens_d(H1a_results[[2]])
b=interpret_cohens_d(H1a_results[[2]])
b
a$CI_low
a$CI_high
H1a_results = test_two_levels(data_PSD$W_PSD40_exp, data_PSD$W_PSD40_con, parametric=TRUE, alternative="greater")
round(mean(data_PSD$W_PSD40_con),2)
round(sd(data_PSD$W_PSD40_con),2)
round(mean(data_PSD$W_PSD40_exp),2)
round(sd(data_PSD$W_PSD40_exp),2)
H1a_results[[1]]
interpret_cohens_d(H1a_results[[2]])
round(H1a_results[[2]],2)
round(H1a_results[[3]],2)
round(H1a_results[[4]],2)
round(format(H2a_results[[1]], scientific=TRUE),2)
H2a_results = test_two_levels(data_PSD$N2_PSD40_exp, data_PSD$N2_PSD40_con, parametric=TRUE, alternative="greater")
round(format(H2a_results[[1]], scientific=TRUE),2)
format(round(H2a_results[[1]],2), scientific=TRUE)
format(H2a_results[[1]], scientific=TRUE, nsmall=2)
format(H2a_results[[1]], scientific=TRUE, digits=2)
format(H2a_results[[1]], scientific=TRUE, digits=3)
rm(a)
a=wilcox.test(data_PSD$REM_PSD40_con, data_PSD$REM_PSD40_exp, paired=TRUE, alternative="greater", conf.int=TRUE, conf.level=0.95)
View(a)
a=rank_biserial(data_PSD$REM_PSD40_con, data_PSD$REM_PSD40_exp, paired=TRUE, alternative="greater", conf.int=TRUE, conf.level=0.95)
rm(a)
# Get data subset
data_anova_PSD_dB = subset(data_PSD_dB_long, condition=="exp", select=c(ID,stage,value))
# Working directory
setwd("C:\\Users\\Mitarbeiter\\Documents\\Gamma_Sleep\\Github_Repo\\Gamma-Sleep\\Code\\Statistics")
# Function files in current directory
source("GammaSleep_statistics_functions.r")
source("GammaSleep_plots_functions.r")
source("GammaSleep_data-handling_functions.r")
# Libraries
library(chron)
## Global variables
# Using global environment (<<- assignment) to avoid redundant function arguments
# Path to folders with derivative data
path_derivatives <<- "C:\\Users\\Mitarbeiter\\Documents\\Gamma_Sleep\\Data\\Derivatives_main\\"
# List of folder names in directory, corresponding to participant numbers
list_IDs <<- list.dirs(path = path_derivatives, full.names = FALSE, recursive = FALSE)
# Remove rejected datasets
list_IDs <<- list_IDs[! list_IDs %in% c("03","15")] # subjects 03 and 15 were drop-outs
## Initializing
data_demo <<- initialize_dataframe("demographic")
data_sleep <<- initialize_dataframe("sleep_quality")
data_PSD <<- initialize_dataframe("PSD_metrics")
data_SSVEP <<- initialize_dataframe("SSVEP_metrics")
## Loading data
load_derivative_data()
# Get data subset
data_anova_PSD_dB = subset(data_PSD_dB_long, condition=="exp", select=c(ID,stage,value))
# Conversion to long format
data_PSD_dB_long = dataframe_wide_to_long(data_PSD[,c("ID","W_PSD40_con","N2_PSD40_con","N3_PSD40_con","REM_PSD40_con","W_PSD40_exp","N2_PSD40_exp","N3_PSD40_exp","REM_PSD40_exp")])
# Get data subset
data_anova_PSD_dB = subset(data_PSD_dB_long, condition=="exp", select=c(ID,stage,value))
data_ID_factor_value = data_anova_PSD_dB
# Change column names for formula format
colnames(data_ID_factor_value) = c("ID","factor","value")
# Model
results = lme(value~factor, random=~1|ID, data=data_ID_factor_value, method="ML")
View(results)
# Table for interpretation of results
anova_table = Anova(results, type="III", correction=sphericity_correction)
View(anova_table)
p_value = results$p.value
p_value
p_value = anova_table["factor","Pr(>Chisq)"]
p_value
effect = eta_squared(results, partial=TRUE) # Partial eta-squared
effect_size = effect$Eta2_partial
effect
View(effect)
post_hoc_tests = pairwise.t.test(data_ID_factor_value$value, data_ID_factor_value$factor, alternative=c("two.sided"), p.adj="bonf")
View(post_hoc_tests)
post_hoc_tests$p.value
post_hoc_tests$p.value[W,N2]
post_hoc_tests$p.value[1,1]
post_hoc_tests$p.value[3,1]
post_hoc_tests$p.value["W"]
post_hoc_tests$p.value["W",]
post_hoc_tests$p.value["W","N2"]
# P-values for post-hoc tests
post_hoc_p_values = post_hoc_tests$p.value
# Model
results = lme(value~factor, random=~1|ID, data=data_ID_factor_value, method="ML")
# Table for interpretation of results
anova_table = Anova(results, type="III", correction=sphericity_correction)
p_value = anova_table["factor","Pr(>Chisq)"]
effect = eta_squared(results, partial=TRUE) # Partial eta-squared
effect_size = effect$Eta2_partial
# Compute post-hoc pairwise t-tests
post_hoc_tests = pairwise.t.test(data_ID_factor_value$value, data_ID_factor_value$factor, alternative=c("two.sided"), p.adj="bonf")
# Confidence interval for effect size
CI_low = effect$CI_low
CI_high = effect$CI_high
# P-values for post-hoc tests
post_hoc_p_values = post_hoc_tests$p.value
View(post_hoc_p_values)
format(post_hoc_p_values["W","N2"], scientific=TRUE, digits=3)
# Run statistical test
results_H5a = test_multiple_levels(data_anova_PSD_dB, parametric=TRUE, sphericity_correction="greenhouse-geisser", verbose=FALSE)
View(results_H5a)
# Function files in current directory
source("GammaSleep_statistics_functions.r")
# Run statistical test
results_H5a = test_multiple_levels(data_anova_PSD_dB, parametric=TRUE, sphericity_correction="greenhouse-geisser", verbose=FALSE)
View(results_H5a)
format(H5a_results[[1]], scientific=TRUE, digits=3)
# Run statistical test
H5a_results = test_multiple_levels(data_anova_PSD_dB, parametric=TRUE, sphericity_correction="greenhouse-geisser", verbose=FALSE)
View(H5a_results)
format(H5a_results[[5]]["W","N2"], scientific=TRUE, digits=3)
format(H5a_results[[5]]["W","N2"], scientific=TRUE, digits=3)
format(H5a_results[[1]], scientific=TRUE, digits=3)
interpret_eta_squared(H5a_results[[2]])
round(H5a_results[[2]],2)
round(H5a_results[[3]],2)
round(H5a_results[[4]],2)
format(H5a_results[[5]]["W","N2"], scientific=TRUE, digits=3)
format(H5a_results[[5]]["W","N3"], scientific=TRUE, digits=3)
format(H5a_results[[5]]["W","REM"], scientific=TRUE, digits=3)
format(H5a_results[[5]]["N2","N3"], scientific=TRUE, digits=3)
H5a_results[[5]]
format(H5a_results[[5]]["N3","N2"], scientific=TRUE, digits=3)
# Conversion to long format
data_PSD_SNR_long = dataframe_wide_to_long(data_PSD[,c("ID","W_SNR40_con","N2_SNR40_con","N3_SNR40_con","REM_SNR40_con","W_SNR40_exp","N2_SNR40_exp","N3_SNR40_exp","REM_SNR40_exp")])
# Median SNR values per condition
medians_PSD_SNR = aggregate(value ~ stage * condition, data_PSD_SNR_long, median) # mean likely biased by outliers
print(medians_PSD_SNR, row.names=FALSE)
print(medians_PSD_SNR, row.names=FALSE)
# Median SNR values per condition
medians_PSD_SNR = aggregate(value ~ stage * condition, data_PSD_SNR_long, round(median,2) # mean likely biased by outliers
# Median SNR values per condition
medians_PSD_SNR = aggregate(value ~ stage * condition, data_PSD_SNR_long, round(median,2)) # mean likely biased by outliers
# Median SNR values per condition
medians_PSD_SNR = aggregate(value ~ stage * condition, data_PSD_SNR_long, round(median,2)) # mean likely biased by outliers
descriptive_PSD40 = data.frame(Mean_dB=rep(NA,4))
View(descriptive_PSD40)
descriptive_PSD40 = data.frame(Mean_dB_con=rep(NA,4),
Mean_dB_exp=rep(NA,4),
SD_dB_con=rep(NA,4),
SD_dB_exp=rep(NA,4),
Nr_epochs_con=rep(NA,4),
Nr_epochs_exp=rep(NA,4))
View(descriptive_PSD40)
# Working directory
setwd("C:\\Users\\Mitarbeiter\\Documents\\Gamma_Sleep\\Github_Repo\\Gamma-Sleep\\Code\\Statistics")
# Function files in current directory
source("GammaSleep_statistics_functions.r")
source("GammaSleep_plots_functions.r")
source("GammaSleep_data-handling_functions.r")
# Libraries
library(chron)
## Global variables
# Using global environment (<<- assignment) to avoid redundant function arguments
# Path to folders with derivative data
path_derivatives <<- "C:\\Users\\Mitarbeiter\\Documents\\Gamma_Sleep\\Data\\Derivatives_main\\"
# List of folder names in directory, corresponding to participant numbers
list_IDs <<- list.dirs(path = path_derivatives, full.names = FALSE, recursive = FALSE)
# Remove rejected datasets
list_IDs <<- list_IDs[! list_IDs %in% c("03","15")] # subjects 03 and 15 were drop-outs
## Initializing
data_demo <<- initialize_dataframe("demographic")
data_sleep <<- initialize_dataframe("sleep_quality")
data_PSD <<- initialize_dataframe("PSD_metrics")
data_SSVEP <<- initialize_dataframe("SSVEP_metrics")
## Loading data
load_derivative_data()
View(data_PSD)
row.names(descriptive_PSD40) = c("W","N2","N3","REM")
View(descriptive_PSD40)
stages = c("W","N2","N3","REM")
View(data_PSD)
i=1
i+=1
i=+1
i
rm(i)
# Initialize
descriptive_PSD40 = data.frame(Mean_dB_con=rep(NA,4),
Mean_dB_exp=rep(NA,4),
SD_dB_con=rep(NA,4),
SD_dB_exp=rep(NA,4),
Nr_epochs_con=rep(NA,4),
Nr_epochs_exp=rep(NA,4))
stages = c("W","N2","N3","REM")
row.names(descriptive_PSD40) = stages
# Fill
ctr_PSD40_con = 3 # counter starting at column 3 of data_PSD
ctr_PSD40_exp = 15 # counter starting at column 15 of data_PSD
for (s in stages) {
descriptive_PSD40[s,"Mean_dB_con"] = round(mean(data_PSD[ctr_PSD40_con]),2)
descriptive_PSD40[s,"Mean_dB_exp"] = round(mean(data_PSD[ctr_PSD40_exp]),2)
descriptive_PSD40[s,"SD_dB_con"] = round(sd(data_PSD[ctr_PSD40_con]),2)
descriptive_PSD40[s,"SD_dB_exp"] = round(sd(data_PSD[ctr_PSD40_exp]),2)
descriptive_PSD40[s,"Nr_epochs_con"] = round(sd(data_PSD[ctr_PSD40_con-1]),2)
descriptive_PSD40[s,"Nr_epochs_exp"] = round(sd(data_PSD[ctr_PSD40_exp-1]),2)
ctr_PSD40_con = ctr_PSD40_con*2
}
descriptive_PSD40[stages[1],"Mean_dB_con"]
round(mean(data_PSD[ctr_PSD40_con]),2)
mean(data_PSD[ctr_PSD40_con])
descriptive_PSD40[s,"Mean_dB_con"] = round(mean(data_PSD[,ctr_PSD40_con]),2)
# Initialize
descriptive_PSD40 = data.frame(Mean_dB_con=rep(NA,4),
Mean_dB_exp=rep(NA,4),
SD_dB_con=rep(NA,4),
SD_dB_exp=rep(NA,4),
Nr_epochs_con=rep(NA,4),
Nr_epochs_exp=rep(NA,4))
stages = c("W","N2","N3","REM")
row.names(descriptive_PSD40) = stages
# Fill
ctr_con = 3 # counter starting at column 3 of data_PSD
ctr_exp = 15 # counter starting at column 15 of data_PSD
for (s in stages) {
descriptive_PSD40[s,"Mean_dB_con"] = round(mean(data_PSD[,ctr_con]),2)
descriptive_PSD40[s,"Mean_dB_exp"] = round(mean(data_PSD[,ctr_exp]),2)
descriptive_PSD40[s,"SD_dB_con"] = round(sd(data_PSD[,ctr_con]),2)
descriptive_PSD40[s,"SD_dB_exp"] = round(sd(data_PSD[,ctr_exp]),2)
descriptive_PSD40[s,"Nr_epochs_con"] = round(sd(data_PSD[,ctr_con-1]),2)
descriptive_PSD40[s,"Nr_epochs_exp"] = round(sd(data_PSD[,ctr_exp-1]),2)
ctr_con = ctr_con*2
ctr_exp = ctr_exp*2
}
descriptive_PSD40[s,"Mean_dB_con"] = round(mean(data_PSD[,ctr_con]),2)
descriptive_PSD40[s,"Mean_dB_exp"] = round(mean(data_PSD[,ctr_exp]),2)
ctr_exp = 15 # counter starting at column 15 of data_PSD
# Fill
ctr_con = 3 # counter starting at column 3 of data_PSD
stages = c("W","N2","N3","REM")
s=stages[1]
descriptive_PSD40[s,"Mean_dB_con"] = round(mean(data_PSD[,ctr_con]),2)
descriptive_PSD40[s,"Mean_dB_exp"] = round(mean(data_PSD[,ctr_exp]),2)
descriptive_PSD40[s,"SD_dB_con"] = round(sd(data_PSD[,ctr_con]),2)
descriptive_PSD40[s,"SD_dB_exp"] = round(sd(data_PSD[,ctr_exp]),2)
descriptive_PSD40[s,"Nr_epochs_con"] = round(mean(data_PSD[,ctr_con-1]),2)
descriptive_PSD40[s,"Nr_epochs_exp"] = round(mean(data_PSD[,ctr_exp-1]),2)
ctr_con = ctr_con*2
ctr_exp = ctr_exp*2
# Working directory
setwd("C:\\Users\\Mitarbeiter\\Documents\\Gamma_Sleep\\Github_Repo\\Gamma-Sleep\\Code\\Statistics")
# Function files in current directory
source("GammaSleep_statistics_functions.r")
source("GammaSleep_plots_functions.r")
source("GammaSleep_data-handling_functions.r")
# Libraries
library(chron)
## Global variables
# Using global environment (<<- assignment) to avoid redundant function arguments
# Path to folders with derivative data
path_derivatives <<- "C:\\Users\\Mitarbeiter\\Documents\\Gamma_Sleep\\Data\\Derivatives_main\\"
# List of folder names in directory, corresponding to participant numbers
list_IDs <<- list.dirs(path = path_derivatives, full.names = FALSE, recursive = FALSE)
# Remove rejected datasets
list_IDs <<- list_IDs[! list_IDs %in% c("03","15")] # subjects 03 and 15 were drop-outs
## Initializing
data_demo <<- initialize_dataframe("demographic")
data_sleep <<- initialize_dataframe("sleep_quality")
data_PSD <<- initialize_dataframe("PSD_metrics")
data_SSVEP <<- initialize_dataframe("SSVEP_metrics")
## Loading data
load_derivative_data()
# Initialize
descriptive_PSD40 = data.frame(Mean_dB_con=rep(NA,4),
Mean_dB_exp=rep(NA,4),
SD_dB_con=rep(NA,4),
SD_dB_exp=rep(NA,4),
Nr_epochs_con=rep(NA,4),
Nr_epochs_exp=rep(NA,4))
stages = c("W","N2","N3","REM")
row.names(descriptive_PSD40) = stages
# Fill
ctr_con = 3 # counter starting at column 3 of data_PSD
ctr_exp = 15 # counter starting at column 15 of data_PSD
for (s in stages) {
descriptive_PSD40[s,"Mean_dB_con"] = round(mean(data_PSD[,ctr_con]),2)
descriptive_PSD40[s,"Mean_dB_exp"] = round(mean(data_PSD[,ctr_exp]),2)
descriptive_PSD40[s,"SD_dB_con"] = round(sd(data_PSD[,ctr_con]),2)
descriptive_PSD40[s,"SD_dB_exp"] = round(sd(data_PSD[,ctr_exp]),2)
descriptive_PSD40[s,"Nr_epochs_con"] = round(mean(data_PSD[,ctr_con-1]),2)
descriptive_PSD40[s,"Nr_epochs_exp"] = round(mean(data_PSD[,ctr_exp-1]),2)
ctr_con = ctr_con*2
ctr_exp = ctr_exp*2
}
View(descriptive_PSD40)
for (s in stages) {
descriptive_PSD40[s,"Mean_dB_con"] = round(mean(data_PSD[,ctr_con]),2)
descriptive_PSD40[s,"Mean_dB_exp"] = round(mean(data_PSD[,ctr_exp]),2)
descriptive_PSD40[s,"SD_dB_con"] = round(sd(data_PSD[,ctr_con]),2)
descriptive_PSD40[s,"SD_dB_exp"] = round(sd(data_PSD[,ctr_exp]),2)
descriptive_PSD40[s,"Nr_epochs_con"] = round(mean(data_PSD[,ctr_con-1]),2)
descriptive_PSD40[s,"Nr_epochs_exp"] = round(mean(data_PSD[,ctr_exp-1]),2)
ctr_con = ctr_con+ctr_con
ctr_exp = ctr_exp+ctr_exp
}
View(descriptive_PSD40)
View(data_PSD)
for (s in stages) {
descriptive_PSD40[s,"Mean_dB_con"] = round(mean(data_PSD[,ctr_con]),2)
descriptive_PSD40[s,"Mean_dB_exp"] = round(mean(data_PSD[,ctr_exp]),2)
descriptive_PSD40[s,"SD_dB_con"] = round(sd(data_PSD[,ctr_con]),2)
descriptive_PSD40[s,"SD_dB_exp"] = round(sd(data_PSD[,ctr_exp]),2)
descriptive_PSD40[s,"Nr_epochs_con"] = round(mean(data_PSD[,ctr_con-1]),2)
descriptive_PSD40[s,"Nr_epochs_exp"] = round(mean(data_PSD[,ctr_exp-1]),2)
ctr_con = ctr_con+3
ctr_exp = ctr_exp+3
}
View(descriptive_PSD40)
data_PSD[,15]
View(data_PSD)
round(sd(data_PSD[,24]),2)
# Fill
ctr_con = 3 # counter starting at column 3 of data_PSD
ctr_exp = 15 # counter starting at column 15 of data_PSD
for (s in stages) {
descriptive_PSD40[s,"Mean_dB_con"] = round(mean(data_PSD[,ctr_con]),2)
descriptive_PSD40[s,"Mean_dB_exp"] = round(mean(data_PSD[,ctr_exp]),2)
descriptive_PSD40[s,"SD_dB_con"] = round(sd(data_PSD[,ctr_con]),2)
descriptive_PSD40[s,"SD_dB_exp"] = round(sd(data_PSD[,ctr_exp]),2)
descriptive_PSD40[s,"Nr_epochs_con"] = round(mean(data_PSD[,ctr_con-1]),2)
descriptive_PSD40[s,"Nr_epochs_exp"] = round(mean(data_PSD[,ctr_exp-1]),2)
ctr_con = ctr_con+3
ctr_exp = ctr_exp+3
}
View(descriptive_PSD40)
# Working directory
setwd("C:\\Users\\Mitarbeiter\\Documents\\Gamma_Sleep\\Github_Repo\\Gamma-Sleep\\Code\\Statistics")
# Function files in current directory
source("GammaSleep_statistics_functions.r")
source("GammaSleep_plots_functions.r")
source("GammaSleep_data-handling_functions.r")
# Libraries
library(chron)
library(ggplot2)
## Global variables
# Using global environment (<<- assignment) to avoid redundant function arguments
# Path to folders with derivative data
path_derivatives <<- "C:\\Users\\Mitarbeiter\\Documents\\Gamma_Sleep\\Data\\Derivatives_supplementary\\"
# List of folder names in directory, corresponding to participant numbers
list_IDs <<- list.dirs(path = path_derivatives, full.names = FALSE, recursive = FALSE)
# Remove rejected datasets
list_IDs <<- list_IDs[! list_IDs %in% c("03","15")] # subjects 03 and 15 were drop-outs
## Initializing
data_demo <<- initialize_dataframe("demographic")
data_sleep <<- initialize_dataframe("sleep_quality")
data_PSD <<- initialize_dataframe("PSD_metrics")
data_SSVEP <<- initialize_dataframe("SSVEP_metrics")
## Loading data
load_derivative_data()
# Working directory
setwd("C:\\Users\\Mitarbeiter\\Documents\\Gamma_Sleep\\Github_Repo\\Gamma-Sleep\\Code\\Statistics")
# Function files in current directory
source("GammaSleep_statistics_functions.r")
source("GammaSleep_plots_functions.r")
source("GammaSleep_data-handling_functions.r")
# Libraries
library(chron)
library(ggplot2)
## Global variables
# Using global environment (<<- assignment) to avoid redundant function arguments
# Path to folders with derivative data
path_derivatives <<- "C:\\Users\\Mitarbeiter\\Documents\\Gamma_Sleep\\Data\\Derivatives_supplementary\\"
# List of folder names in directory, corresponding to participant numbers
list_IDs <<- list.dirs(path = path_derivatives, full.names = FALSE, recursive = FALSE)
# Remove rejected datasets
list_IDs <<- list_IDs[! list_IDs %in% c("03","15")] # subjects 03 and 15 were drop-outs
## Initializing
data_demo <<- initialize_dataframe("demographic")
data_sleep <<- initialize_dataframe("sleep_quality")
data_PSD <<- initialize_dataframe("PSD_metrics")
data_SSVEP <<- initialize_dataframe("SSVEP_metrics")
## Loading data
load_derivative_data()
View(data_PSD)
check_normality(data_PSD$W_PSD40_exp - data_PSD$W_PSD40_con, plot=FALSE)
check_normality(data_PSD$W_PSD40_exp - data_PSD$W_PSD40_con, plot=TRUE)
check_outliers(data_PSD$W_PSD40_con, plot=TRUE)
check_outliers(data_PSD$W_PSD40_exp, plot=FALSE)
H1a_results = test_two_levels(data_PSD$W_PSD40_exp, data_PSD$W_PSD40_con, parametric=TRUE, alternative="greater", verbose=TRUE)
check_normality(data_PSD$N2_PSD40_exp - data_PSD$N2_PSD40_con, plot=FALSE)
check_outliers(data_PSD$N2_PSD40_con, plot=FALSE)
check_outliers(data_PSD$N2_PSD40_exp, plot=FALSE)
check_normality(data_PSD$N3_PSD40_exp - data_PSD$N3_PSD40_con, plot=FALSE)
check_outliers(data_PSD$N3_PSD40_con, plot=FALSE)
check_outliers(data_PSD$N3_PSD40_exp, plot=FALSE)
check_normality(data_PSD$REM_PSD40_exp - data_PSD$REM_PSD40_con, plot=FALSE)
check_outliers(data_PSD$REM_PSD40_con, plot=FALSE)
check_outliers(data_PSD$REM_PSD40_exp, plot=FALSE)
check_normality(data_PSD$W_PSD40_exp, plot=FALSE)
check_normality(data_PSD$N2_PSD40_exp, plot=FALSE)
check_normality(data_PSD$N3_PSD40_exp, plot=FALSE)
check_normality(data_PSD$REM_PSD40_exp, plot=FALSE)
check_outliers(data_PSD$W_PSD40_exp, plot=FALSE)
check_outliers(data_PSD$N2_PSD40_exp, plot=FALSE)
check_outliers(data_PSD$N3_PSD40_exp, plot=FALSE)
check_outliers(data_PSD$REM_PSD40_exp, plot=FALSE)
check_sphericity(data_PSD[,c("W_PSD40_exp","N2_PSD40_exp","N3_PSD40_exp","REM_PSD40_exp")])
# Working directory
setwd("C:\\Users\\Mitarbeiter\\Documents\\Gamma_Sleep\\Github_Repo\\Gamma-Sleep\\Code\\Statistics")
# Function files in current directory
source("GammaSleep_statistics_functions.r")
source("GammaSleep_plots_functions.r")
source("GammaSleep_data-handling_functions.r")
# Libraries
library(chron)
## Global variables
# Using global environment (<<- assignment) to avoid redundant function arguments
# Path to folders with derivative data
path_derivatives <<- "C:\\Users\\Mitarbeiter\\Documents\\Gamma_Sleep\\Data\\Derivatives_main\\"
# List of folder names in directory, corresponding to participant numbers
list_IDs <<- list.dirs(path = path_derivatives, full.names = FALSE, recursive = FALSE)
# Remove rejected datasets
list_IDs <<- list_IDs[! list_IDs %in% c("03","15")] # subjects 03 and 15 were drop-outs
## Initializing
data_demo <<- initialize_dataframe("demographic")
data_sleep <<- initialize_dataframe("sleep_quality")
data_PSD <<- initialize_dataframe("PSD_metrics")
data_SSVEP <<- initialize_dataframe("SSVEP_metrics")
## Loading data
load_derivative_data()
View(data_PSD)
plot(data_PSD$N2_nepochs_exp, data_PSD$N2_PSD40_exp)
plot(data_PSD$N3_nepochs_exp, data_PSD$N3_PSD40_exp)
plot(data_PSD$REM_nepochs_exp, data_PSD$REM_PSD40_exp)
cor(data_PSD$W_nepochs_exp, data_PSD$W_PSD40_exp)
round(cor(data_PSD$W_nepochs_exp, data_PSD$W_PSD40_exp),2)
round(cor(data_PSD$N2_nepochs_exp, data_PSD$N2_PSD40_exp),2)
round(cor(data_PSD$N3_nepochs_exp, data_PSD$N3_PSD40_exp),2)
round(cor(data_PSD$REM_nepochs_exp, data_PSD$REM_PSD40_exp),2)
